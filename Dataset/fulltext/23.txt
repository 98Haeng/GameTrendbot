제목: [NDC22-데이터분석] &#39;카트라이더: 드리프트&#39; 머신러닝을 활용한 위치 예측 개선

[음악] co 안녕하세요 카트라이더 드리프트 t 뭐 신랑의 활용한 위치에 측 개성에 대해 발표할 비트로 스튜디오 r n d 에서 의 김진호 입니다 [음악] 안녕하세요 카트라이더 드리프트 머신 러닝 을 활용한 위치 예측 개선 발표를 하게 된 니트로 스튜디오 rnd 이색 임기내 입니다 저는 ea 서울 스튜디오에서 배틀필드온라인 격발 시작으로 게임 업계에 발을 들이게 되었고 요 대학교 졸업후 엔진 스튜디오에 있잖아여 morpg 수신하고 나르 기회를 만들었습니다 그 후 ng 스튜디오가 넥슨에 인수되면서 카트라이더 팀에 합류하게 되었고 현재는 리트로 스튜디오에서 카트라이더 드리프트 를 개발 중입니다 먼저 어떤 게임인지 소개해드릴게요 2004년 오픈한 온라인 레이싱게임 k 크레이지레이싱 카트라이더 의 정통 후속작으로 원자 카트라이더 는 글로벌 유저수가 3억 8천 만 명을 넘어섰고 요 우리나라 인구의 절반 이상이 플레이한 적이 있는 국민 게임 입니다 카트라이더 드리프트 는 글로벌 서비스의 목표로 한 크로스 플랫폼 게임으로 pc 엑스박스 플레이스테이션 포에서 즐기실 수 있구요 지난 12월에 3차 cbt 를 진행 하였습니다 카트라이더 게임을 잘 모르시는 분들도 계실텐데요 어떤 게 이미지 영상 1 보여드리고 발표를 시작하도록 하겠습니다 냐 뭘 입어도 대형 예비 밥 먹는 거 장군 앞에서 그것도 생각합니까 아 또 올라요 울나라 발라주세요 이거 면접이 까 일단 장병 어머 어쩜 역량 아닙니까 아참 명령어 훌라 여포 gd 이게 않는지도 보나요 털털 해봐서 봐야 되요 이거 봐야 돼요 안 중상 북을 계속 이래요 때라도 같아서 가치의 주상은 또 그래 사진속 막 고온의 좀 토록 향해 올들어 밀주 결정 적용이 역적 0 0 4 이 영상은 2016년에 있었던 이벤트전 결성 전경기 인데요 앞서 보신 결과 같이 0.00 1초 차이로 도 승자와 회자가 정해지는 박진감 넘치는 매 신계 입니다 제 발표 내용에 대해 맛보기로 살짝 보여드릴 텐데요 바닥에 표시되는 네모 박스 는 실제로 카트가 움직인 경로 고요 화면에 보이는 카트는 내 화면에서 향배 카트가 어떻게 보이는지를 나타내요 내 화면에 보이는 상대 카트가 실제 상대 카트에 위치인 박스를 얼마나 잘 따라가는 지 비교해 보시면 되겠습니다 왼쪽의 개선작업 청 영상에서 카트가 종로를 어떻게 따라가는 지 살펴볼까요 개선 자고 플레이 어떻게 되었을까요 2 영상이 차이점을 좀 느끼셨나요 못 보신 분들을 위해 한번 더 플레이 해 볼게요 녹색 굉장한 나올때 카트가 상자와 얼마나 가깝게 이동하는지 살펴봐주세요 발표를 준비하면서 어떤 분들을 대상으로 설명해야 할지 고민을 좀 해봤는데요 게임프로그래머 분들께는 잘 풀리지 않는 문제가 있을 때 머신 러닝 을 통해서 해결할 수도 있다는 부분을 보여드리고 싶었고 요 ai 개발자 분들께는 머신 러닝 을 활용하여 실제 게임 플레이 에 적용한 사례로 알아주셨으면 합니다 일반적으로 게임 에서는 인공지능을 만들거나 매치메이킹 로그 분석 등의 머신 러닝 기술을 많이 활용 하는데요 이런 사례도 있는 것을 보여드리고 싶었어요 또한 카트라이더 드리프트 를 기대하시는 분들 께는 보다 재미있는 플레이를 위해 개발자들이 어떤 것들 연구하고 있는지 간단하게 보여드릴 수 있는 세션이 되었으면 합니다 참고로 본 3 쩌는 기술적이고 디테일한 부분을 설명하는 것보다 개발 과정에서 저희 팀이 문제를 해결하는 과정을 공유하는 것을 목표로 준비 해보았습니다 체 발표는 다음과 같은 순서로 진행이 되는데요 첫째 위치에 측을 왜 해야 하는지에 대하여 짧은 영상과 스크린샷 등을 통해서 설명드리고 어떤 문제를 풀 것인지에 대해 소개할 예정입니다 그다음 머신 러닝 을 활용하여 만든 모델들을 살펴보고 각 4 별로 성능을 비교 해 보고요 마지막으로는 이후 남은 작업들에 대해 소개하면서 발표를 마무리 하려고 합니다 카트라이더 에서 위치에 측은 왜 해야할까요 우선 현재 과 온라인 게임의 차이점에 대해 살펴 볼 건데요 설명을 도와줄 노란색 캐릭터의 이름은 힘이 파란색 캐릭터의 이름은 다우 입니다 디즈니가 a 에서 c 로 이동을 하려고 해요 처음에는 두 캐릭터 모두 디즈니가 a 에 있는 것을 알고 있었어요 이제 이동을 한 디즈니가 위에 도착했고 도착과 동시에 다 오는 디즈니가 삐 해온 것을 볼 수 있죠 디즈니가 께서 움직여서 씨의 도착을 하면 마찬가지로 같은 시점에 다 5도 씨의 온 것을 알 수 있어요 이렇게 현실에서는 다우 가 보고 있는 씨의 위치가 실제 dg 의 위치와 동일한 되요 온라인 게임에서 되게 해선 어떨까요 앞이 그림과 마찬가지로 디즈니가 주어진 길을 따라 이동 할 텐데요 온라인 게임에서는 디딘 의 위치정보를 더욱 아 직접 보는 게 아니라 서버를 통해서 전달 받게 됩니다 디즈니가 a 를 지나면서 a 에 도착했다는 데이터를 서버에 계보 내고요 이 데이터를 밭은 서버는 해당 내용을 다 우 에게 전달 하는데요 다운은 서버로 부터 정보를 받아서 이진이 가 a 에 도착했다는 것을 알게 되었어요 그럼 이때 디즈니 위치 어디일까요 계속 이동한 dj 는 벌써 비에 도착했네요 다 5가 보고 있는 기준이 에 위치는 a 인데 현재 디즈니의 위치는 빚어 이렇게 서로 알고 있는 위치가 다른데요 왜 이렇게 됐을까요 그 이유는 바로 데이터를 전달할 때 레이턴시 즉 네트워크 지연 시간이 있기 때문이에요 현실과 달리 온라인 게임 세계에서는 다른 유저들과 데이터를 주고 받는 것이 동시에 이루어 지지 않습니다 만약 게임을 만들때 레이턴시 를 고려하지 않고 만들면 어떻게 될까요 두 명의 유저가 게임 시작과 동시에 전쟁 키를 꾹 누르고 있는 상황을 가정해 볼게요 노란색 원으로 표시한 카트가 각 유저가 움직이는 카테고리 요 우리가 기대하는 결과는 두 대의 카트가 나랑이 달리는 건데요 과연 예상대로 되는지 확인해 볼까요 유저가 움직이는 카트가 당대 카트 보다 조금씩 앞서서 움직이고 있죠 왜 이런 결과가 나왔을까요 게임 시작후 전개 끼 를 누른 상태에서는 각 유저가 움직이는 카트가 먼저 이동하게 되는데요 왜냐하면 카트에 반응성을 좋게 하기 위해 자신의 카트에 위치는 서버를 거치지 않고 변경 되고요 반면 상대방 카트에 움직임은 서버를 통해 전달 받기 때문에 레이턴시 만큼 늦게 알게 되기 때문이에요 따라서 레이턴시 를 고려하지 않고 상대의 정보를 받는 대로 화면에 보여 준다면 이전 영상과 같이 내가 앞선 상태로 아람이 움직이는 것을 볼 수 있어요 그러면 레이터 실에 고려해서 보다 자연스러운 게임을 만들어 볼까요 아직 상대방의 정보를 받지 못했을 때는 내가 조금 앞서 나갈 수 있는데요 상대 유저의 정보들을 알게 된 이후로는 향 대 이행자 카트 위치를 예측해서 표시하면 나란히 달리는 것처럼 보일 거에요 이렇게 되면 게임을 자연스럽게 플레이 할 수 있겠죠 카트라이더 에서는 레이턴시 를 극복하기 위해 등속 예측모델 사용했는데요 상대 카트가 같은 속도로 이동 한다고 가정하고 카트에 과거 위치와 속도를 바탕으로 현재 시점에 위치에 측을 합니다 이 과정에서 중학교 과학시간에 배웠던 등속 운동 공식을 사용하고 있는데요 간단하게 설명드리면 s 에는 내가 계산한 카트에 위치 x 제로 는 전달받은 카 페 과거 위치 v 는 카테 과거 속 두고요 마지막으로 델타 t 는 현재 식감과 과거 시각의 차이 값이 됩니다 패킷의 기록된 시간 이후로 일정하게 부위에 속도로 이동했다 고 계산은 건데요 등속 예 친구 대를 적용해서 플레이한 영상을 살펴볼까요 앞서 보여드렸던 영상과 달리 나란히 달리는 것을 볼 수 있습니다 등 속여 층 모델을 적용했을 때 직선 주행에서는 자연스러운 움직임을 확인할 수 있죠 그렇다면 곡선 중에서 어떻게 될까요 카트라이더를 플레이하시는 유저분들은 커브 구간 을 주행할 때 속도를 최대한 덜 줄이면서 빠르게 통과하기 위해 드리프트를 사용하시죠 드리프트를 사용한 주행에서는 어떻게 보이는지 다음 페이지에서 같이 확인해 볼게요 보여드릴 영상은 레이턴시 가신 미리 세컨드 일대의 영상 이고요 카트가 표시된 상자들을 따라서 잘 움직이는지 같이 확인해 볼게요 방금 보신 영상과 같이 인터넷 환경이 좋을 때는 등속 예측 모델을 적용했을 때 큰 오차없이 경로를 잘 따라 가는데요 인터넷 상태가 나쁜 환경에서 는 어떻게 보이는지 다음 페이지에서 레이턴시 가 100미리 세컨드 에 영상을 보시죠 이전 영상과 차이를 발견 하셨나요 방금 보신 영상에서는 카트가 경로를 잘 따라가지 못하고 커프 구간에서 바깥쪽으로 밀리는 현상이 일어나는데요 비교를 위해 첫 번째 커브 구간 에서 스크린샷을 찍어 보았어요 왼쪽 그림은 카트에 뒷바퀴 크기 옷 정도만큼 경로에서 벗어나는데 오른쪽 그림은 카트 전체가 경로를 완전히 이탈하고 있어요 등속 예측모델 이 경로가 레이턴시 에 따라 위에서 바라보았을 때 어떻게 보이는지 같이 살펴보실 게요 실제로 지나간 위치는 파란색 점으로 예측한 위치는 주황색 점으로 표시 해 보았습니다 두 그림 모두 식성 구간에서는 주행 라인이 거의 겹치는 모습을 보이는데요 레이턴시 가 작을 때에는 예측한 거리가 짧아서 왼쪽 그림처럼 5차 크지 않고요 데이터 섞으면 긴 시간 동안 이동한 거리를 예측해야 해서 실제 위치와 막 간격이 많이 벌어 지죠 그림을 보시면 주황색 점 이 바깥쪽으로 많이 벗어난 것을 알 수 있어요 카트라이더 드리프트 커뮤니티에서 자주 받는 p 들에 게 하나 있는데요 들어보실까요 카트라이더 코드 다 있는데 물리는 똑같이 구현하고 그래픽 개선 해서 빨리 좀 출시해 주시면 안되나요 4 이런 피드백 인데요 아쉽게 높이 시 카트라이더 와 카트라이더 드리프트 는 몇가지 차이점이 있어요 pc 카트라이더 는 국가별로 서버가 있어 레이턴시 20 미리 세컨드 이하로 플레이를 할 수 있는데요 이 정도의 환경에서는 앞서 보셨던 것처럼 등속 운동 부대로 예측을 하더라도 자연스러운 플레이가 가능합니다 반면 카트라이더 드리프트 는 글로벌 서비스를 목표로 하고 있고 대디 kd 서버 구조를 사용하여 한국 유저들 끼리 만나도 50mm 세컨드 정도 해외 유저들을 만나면 더 큰 웨이터 시가 있어요 이렇게 레이터 시가 큰 상황에서 기존 모델을 사용하면 드리프트 시 실제 경로와 차이가 큽니다 보다 자연스러운 게임이 우리의 이 문제를 어떻게 풀어야 할지 한참 고민 해 보았는데요 주행에 관여되는 파라미터가 많다 보니 조금씩 수정하면서 테스트하지 그 아기 어려웠어요 한참 헤매고 있었는데 팀장님께서 지금까지 했던 작업을 머신 러닝 으로 접근해 보자 는 의견을 주었어요 저는 그때까지 게임 프로그램으로 만일 냈고 머신 러닝 은 생소했던 분야 였는데요 데이터를 통해 답을 구할 수 있지 않을까 라는 아이디어가 좋아보여서 본 프로젝트를 시작하게 되었습니다 지금까지 발표했던 내용을 3줄로 정리해보면 온라인 게임에서는 연쇄가 달기 레이턴시 가 있어서 위치 예측 로직이 필요한 것을 확인 해 봤고요 기존에 사용하던 등속 예측 모델은 레이턴시 가 낮을 때는 괜찮았지만 클 때 드리프트 주행 계측에 좋지 않았어요 그래서 요즘 핫한 기술인 머신 러닝 을 통해 좋은 답을 찾아보기로 했습니다 자 이제 어떤 문제를 풀어야 할지 알아보도록 하겠습니다 빨간 상자로 표시했던 일반 주행 은 기존 오직 에서도 잘 예측해 쓰니 드리프트 주의해서 잘 예측하는 모델에 대해 포커스 하게 로 정했고 요 레이터 씨의 경우 목표를 너무 작게 잡으면 오차가 작아서 큰 차이가 없는 관계로 적당한 네트워크 환경에서 원활한 플레이어에게 목표로 100미리 3 큰옷 정도로 두고 작업을 시작했어요 그리고 내 화면에 보이는 상대 카트는 8인 플레이 기준 최대 7배 이고 게임의 60프레임으로 즐긴다고 하면 1초에 4 120번 예측이 가능 이에요 따라서 너무 연습량이 많은 모델은 사용할 수 없었구요 이런 조건에서 어떤 데이터를 가지고 문제를 풀어야 하는지 사용 가능한 재료들을 살펴볼게요 먼저 뵙기 3 보낸 시간이 포함되어 있구요 그 시점에 카테 위치 선 속도 각 쏙 뿌 당연히 있습니다 카트가 바라보고 있는 방향과 실제 이동 방향이 다를 수 있기 때문에 속도와 방향이 따로 주어지고 요 키보드로 어떤 기대를 누르고 있는지 상태 값이 함께 주어집니다 그리고 마지막으로 드리프트 상태가 주어지는데요 이는 드리프트를 누른다고 일정하게 동작하는 게 아니라 내부적으로 드리프트 상태 변화에 따라 움직임이 조금씩 다르기 때문에 패킷의 포함 했어요 앞서 가온 자료들을 가지고 상대가 드리프트를 사용할 때 베타 t 시간 의 위치가 어디인지를 계산하는 문제를 풀고 있었는데요 게임 시작할 때는 잘 동작 했는데 시간이 지나면서 계산 값이 이상한 경우가 있어서 원인을 확인해 봤어요 a 에서 드리프트를 할 때나 비해서 드리프트 할 때 위치를 제외한 모든 조건이 같다면 카트에 주행 경로 가 이렇게 일치 해야 하는데요 이 값이 다른 문제가 있었어요 드리프트 시작 위치가 결과에 영향을 주고 있었는데요 실제로 시작 있지 관계없이 모든 조건이 같으면 주행 라인이 같아야 게임이 되겠죠 그래서 최종 위치를 예측하는 게 아니라 드리프트 시작점을 항상 원점 이라고 가정하고 위치 변화량을 예측하는 문제 로 변경했고 이 문제를 풀기 위한 모델을 만들게 되었습니다 이제 저희 팀에서 작업했던 머신 러닝 모델을 보여드릴 텐데요 사실 개발 과정에서 열 가지도 넘는 모델들을 테스트 해보았지만 슬라이드에 다 쓰기엔 공간도 부족하고 발표 시간 도 모자라서 개발과정에 인상 깊었던 2가지 모델을 소개해 드리려고 합니다 첫 번째 모델은 리얼 이 글에선 선형 회귀 모델입니다 기존에 사용하던 등속 예측 모델에서 변화량 에게 상했던 공식을 다시 살펴 볼게요 앞서 나왔던 공식을 조금 변형 했는데요 우리가 예측해야 하는 변화량 sli 너스 s0 는 속도 v 곱하기 의 시간을 다 피해요 이때 시간은 상황에 상황에 따라 달라지는 값이 제외하고 실제 변화량 예측의 사용하는 b 차는 속도가 사용하고 있었어요 그런데 현재 우리가 알고 있는 빛은 n 앞이 패킷 구조 에서 보았듯이 속도 뿐 아니라 더 많은 p4 들이 있구요 p 차들의 과거 데이터까지 알고 있죠 따라서 변화란 같은 패킷의 없는 더 다양한 p 차들을 활용할 수 있어요 이 데이터는 일종의 시계 열무 대립으로 시계열 분석 에서 많이 사용하는 알이 말하는 모형을 활용하여 분석해 보았구요 그래서 어떤 p 차들이 변화량 영향을 붙였을까 요 관련 도가 높은 비쳐 로는 앞서 보셨던 속도 v 와 속도의 변화량 델타 v 속도의 2차 변화량 델타 2v 가 있었고 마지막으로 각속도 오메가가 있었어요 변화량을 계산하려면 각 p 자들이 얼마나 영향을 주는지를 알아야겠죠 예측 시간에 따라 일정 패턴이 있을 것이라고 생각해서 각 피차 별로 그래프를 그려 보았는데요 시간을 0.0 1초 간격으로 증가 시켜 가면서 세탁 값을 구에서 점을 찍어 보았어요 그래프의 있는 점들의 분포가 전형인 것을 보고 미디어 리그 해설을 통해 p 에 따른 세탁 값을 구하는 식을 이렇게 만들었구요 여기서 9 1 3 딱 값을 대입해서 변화량을 계산하는 모델을 대입해 는데요 기존 모델과 비교했을 때 성능이 얼마나 좋아졌는지 확인해 볼게요 모델 영이 기존 모델의 결과값이 구요 모델이 는 전혀 회계를 통해 예측한 개 바꿨습니다 두번째 줄의 민우를 표시된 부분이 실제 위치와 예측한 위치에 평균 제곱 목 차 값이 고요 각 모델의 오차를 비교했을 때 모델이 에 오차가 체 2% 정도 개선 되었어요 오른쪽 그래프는 레이턴시 구간별로 오차를 표시하고 있는데 레이턴시 가 커질수록 5차 값이 기하급수적으로 증가하는 것을 볼 수 있습니다 이 수치가 어느 정도 차이인지 영상으로 비교해볼게요 앞서 영상들 처럼 녹색 구간의 집중해서 살펴 보시면 되겠구요 왼쪽 영상은 이렇게 박스를 완전히 벗어나고 있는데 오른쪽 영상을 보시면 앞바퀴가 박스를 걸쳐서 지나가는 것을 확인하실 수 있을거예요 첫 번째 모델 설명은 여기까지 였구요 이제 두 번째 모델인 뒤에는 glu 모델에 대해 설명해 보겠습니다 앞에서 살펴본 선형 회귀 무대리 연설 양은 적고 오차가 어느 정도 줄어든 것을 보면서 최적화를 해 보았는데 곳 1개의 부딪혔어요 그 원인은 데이터의 구조가 비선형적 이라서 그런게 아닐까라는 생각을 했습니다 이 문제를 해결할 방법으로 김 논이므로 접근 하기로 결심했고 김 논이 의의 및 층의 활성화 함수를 사용하여 문제를 풀어 보았어요 딘 러닝을 사용 하기로 정한 후 ls tm 이나 cnn 등 의 모델로 먼저 접근을 해 봤는데요 개선된 오차의 비해 연설 양이 많아서 실제 클라이언트의 적용했을 때 다음 영상과 같이 왼쪽 아래에 있는 cpu 그래프가 드리프트 할 때 막히더라구요 여기 가운데 볼록한 부분 보이시죠 그래서 앞의 두 모델은 회개하고 뒤엔 구조로 실험을 시작했어요 일반적으로 뒤에 내서 활성화 함수로 멜로를 많이 사용하고 있는데요 역정 파 과정에서 해당 노드가 죽어버리는 다행히 멜로 문제를 보아는 빗길에 룰을 사용 해 보았구요 빗길에 를 사용한 모델이 멜론 앓다 대칭은 사용했을 때보다 결과값은 좋았는데 무대리 점점 무거워져서 추가 해결책이 필요했어요 개선책을 생각하다가 쥬얼리 활성화 한 술 떠 올렸는데요 시퀀스 모델에서 사용하는 일종의 게이트 역할을 하는 호수로 중요한 정보를 추출할 때 사용한 함수 해요 정형 데이터 모델에서 도 같은 역할을 할 것이라고 기대하면서 적용해 보았고 비키 렐 로만 사용했던 모델에 비해 좀더 가벼우면서 좋은 성능을 얻을 수 있었습니다 이후 여러 번의 실험을 거쳐서 만들어진 모델이 의 구조는 대략 이렇게 생겼구요 미키를 넘 수들의 기본적으로 사용했고 데이터가 너무 발생하는 것을 막기 위해 사이사이에 지혜를 염소를 섞어 고요 또 초기에 입력을 출력 연결 시키면 스키 컨셉 성 구조도 추가해서 위한 같은 모델이 탄생했습니다 이때 입력으로 사용 을 피자 들은 다음과 같구요 만들어진 모델을 시뮬레이션 했을 때 오차가 어떻게 되는지 확인해 볼까요 앞이 두 모델과 뒤에 낸 glu 무대를 비교해 볼 텐데요 오차가 절반 이상 술어 땅 리니어 리그 해석 모델의 비교해도 5차 값이 훨씬 작은 것을 확인할 수 있어요 153 에서 스펠로 주었는데요 오른쪽 그래프에서 뭐 실현 뒤에 낸 진루 모델이 오차는 거의 보이지 않죠 앞에서 보셨던 여성들처럼 빨간색 직선 구간 보다 녹색 구성 구간의 집중해서 비교해주세요 커브 구원에서 스크린샷을 찍어 보았는데요 위의 스크린샷은 첫번째 구간에서 아래의 스크린샷은 두번째 구간에서 찍어보았어요 기존 모델의 경우 카트가 녹색 상자 를 완전히 벗어난 1 때까지 밀리는 것을 확인하실 수 있고요 현영의 기 모델은 카트 앞부분이 살짝 상자와 겹치고 있는 반면 디엔엔젤 모델은 카트 대부분이 상자 겹쳐져 있죠 개발을 진행하면서 5 찰 숫자로 확인했을 때는 어느 정도나 졌는지 비교하기 어려웠는데요 이렇게 영상을 찍고 나란히 플레이에서 비교 해봤더니 점점 개선되는 것을 확인할 수 있었어요 이제 3살 발표를 마무리 하려고 하는데요 많이 개선 한다고 했지만 앞서 확인 하셨던 것처럼 5천을 남아 있었죠 그런데 이때 이 레이턴시 가 100미리 세컨 되었는데요 지난 3차 11 뒤에서 해외 유저들과 매칭 되었을 때 1a 터지는 200 밀리 세컨드 를 넘기도 했어요 결과가 제일 좋았던 뒤에는 지혜로운 모델로 레이트 c200 에서 주행을 하면 오른쪽 그림처럼 카트에 절반 이상이고 늘 벗어나서 이를 해결하기 위한 노력을 하고 있구요 또 짜 발생하는 근본적인 원인은 레이턴시 만큼 패킷을 늦게 받고 그 가끔 내 화면에 보이는 다른 유저의 카트가 늦게 드리프트를 시작하기 때문인데요 어떻게 하면 상대 카트에 드리프트 시작 시점을 예측할 수 있을까요 실력이 비슷한 유저들의 플레이 패턴이 나은 맵 정보를 통해서 뭔가 패턴이 있지 않을까 같은 생각을 하면서 보다 나은 모델 만들기 위해 노력하고 있습니다 제가 발표했던 이번 주제는 2019년 npc 에서 관계의 전 님께서 발표 하셨던 카트라이더 0.001 쫓아 의 중부 300km 파워 불체 이 네트워크 동기화 모델 구형 기 세션의 이후 이야기 였구요 카트라이더 개발에 관심 있으신 분들께서는 ndc 다시 보기에서 해당 세션 발표도 참고하시면 도움이 됐을 거예요 유저분들이 게임을 보다 재미있게 플레이하실 수 있도록 카트라이더 드리프트 에 데이터를 활용한 다양한 작업을 준비하고 있고요 이틀후 스튜디오에서 함께 개발 하실 분들을 구하고 있습니다 본 발표를 준비하는 동안 도움을 주신 분들께 감사하다는 말씀을 드리며 이상 발표를 마무리 하도록 하겠습니다 시청해주셔서 감사합니다 김진오 였습니다 [음악]