제목: [NDC] 소잡는 칼 - Kafka를 이용한 비동기 메시지 시스템 구현 및 활용

네 안녕하세요 4 어 이번에 그 소 잡는 칼 이라는 이름으로 에서 발표를 지나게 된 라이어게임 코리아에서 그 막 소프트 엔지니어로 근무하고 있는 중이라고 합니다 네 오늘 만났기에 바울을 만나 뵙게 되서 되게 반갑구요 어우 오늘 말씀드릴 내용은 어 저희가 이제 그 마이크 로스 아 마이크 서비스 아키텍처를 근간으로 해서 이제 작년에 개발했던 그 프로젝트 가운데 하나인 어 카프카 를 이용한 비동기 메시징 서비스 시스템 이라는 내용을 가지고 이제 발표를 드릴 예정인데요 어 전체적인 발표내용 진행을 위해서 맨 처음에는 그 여러분들이 아끼 뭐 이미 지금 알고 계시겠지만 마이크 서비스 아키텍처 에 대해서 먼저 간단하게 설명을 드리고 저희가 이런 개념이나 아니면 기반을 바탕으로 해서 어떤 작업을 했고 그 가운데에서 어떤 계기를 통해서 이 비동기 메시지 서비스 라고 하는걸 개발을 하게 됐는지를 설명을 드리도록 하겠습니다 그 다음으로 막 마지막으로 저희와 야겜 코리아에서 개발팀이 어떤 방식으로 일을 하는지를 간단하게 설명되어 있는 걸로 전체 발표를 진행을 하도록 하겠습니다 4 어 먼저 이제 아키텍처 라는 부분은 이제 말씀을 드리면 전체 이제 아키텍처 라고 하는 부분이 이제 여러분들 어 혹시 그 마이크로 서비스 아키텍처 라고 하는 부분에 대해서 본인이 들어봤다 라고 하시는 분 손 한번 들어 보실래요 네 그렇죠 어 마이크 서비스 라고 하는 아키텍처가 대략 한 2012년부터 거의 국내 2개 수도 많이 도입되기 시작했고 많이 그래 뜨기 시작했습니다 기존에 저희가 이제 이 마이콜 서비스 아키텍처 이전에 이제 가지고 있던 아키텍처에 대한 개념을 퉁 쳐서 보통 이제 뭐 널리 d 라고 하는 이름으로 많이 부르고 있는데 현재 뭐 대체적으로 봤을 때 거의 모든 이 서비스 시스템을 구성하는 데에 대한 기본적인 아키텍처의 방향 자체는 기존의 이제 몸을 이득이라는 아키텍처에서 이제 마이크로 서비스 라고 하는 아키텍처 파경 으로 바뀌어 가고 있습니다 자 들어가기 전엔 오늘 이 갖고 마이크로 서비스 아키텍처 가 어떤 부분에 대해서 차이점이 있는지 간단하게 지금 할게요 뭐 특정 빼고 다 아시겠지만 오늘 리딕 이라고 하면 문호 라고 하는 말의 의미 하는 것처럼 다 아내 하나의 어플리케이션에 거의 모든 것을 다 빼려 넣는 방식으로 개발을 하는 게 이제 대표적인 질문 올리기 줘 여기서 이제 다 들여 놓는다 라는 말의 의미는 그 안에 프론트엔드 쪽에 관련된 뭐 html5 css 남 자바스크립트 플러스 그다음 - 왼쪽에 관련된 각종 비즈니스 로직 까지 포함된 하나의 어플리케이션을 구성 시키는게 가장 전통적인 제모는 리딕 방식의 개발 방식 이라고 보실 수 있을 것 같습니다 물론 이제 그 안에서 이제 데이터 스토어 에 관련된 부분도 보시는 것처럼 단일한 데이터 스스로를 인지 이용하는 체계가 보통 이제 통상적인 지문을 이르게 개발 방법이라고 볼 수 있을 것 같고요 반해서 이제 마이코 서비스 아트텍 의 경우에는 어떤 하나의 기능 블럭이 나 아니면 어떤 롤의 관련된 부분들을 개별적인 음 개별적인 서비스의 이름으로 별도의 프로세스해커 오븐 어플리케이션으로 분리를 해서 개별적인 커뮤니케이션을 어 개별적인 제 구현을 하는 방식이죠 그래서 각각의 어플리케이션들은 별도로 존재 어 어 각각의 어플리케이션은 별도의 프로세스는 아 혹은 서버 에 독립적으로 운영되고 각각 2 자기가 맡은 역활을 수행을 하는데 사회에 필요한 데이터나 어떤 기능에 대한 역할들을 서로 통신이 라는 개념을 통해서 내용을 주고 받게 됩니다 가장 비교나 게는 무시는 것처럼 이 프론트엔드 도 별개의 이제 어플리케이션 서버 에서 구동되고 빽 & 도벽이 어플리케이션 서버 로 양당 간의 프로세스를 분리하는 것이 가장 대표적으로 추진되는 마이코 서비스의 개념 이라고 보실 수 있을 것 같습니다 자 그래서 이거를 조금 더 다른 관점에서 보자 라고 하면 문 레이디 같은 경우에는 배달이 큰 덩어리를 1 가지 5 그에 반해서 마이코 서비스 아키텍처의 기반 에서는 행적으로 되게 슬림한 구조를 가지고 각각의 슬림 한 구조에서 개별적인 서비스가 자신이 외부의 제공해 줄 수 있는 어떤 기능이나 데이터나 이런 부분들을 웨스트 풀 이라고 하는 n p 를 통해서 외부의 이제 전달하는 방식을 취하게 됩니다 자 이 부분들을 조금 더 보면 하나의 어플리케이션 상에서는 가 기존의 뭘 이득 방식에서는 각각의 어떤 기능들이 나 이런 부분들이 소위 말해서 콤포넌트 라고 하는 개념으로 2 알이 됩니다 대신 이 컴포넌트 라고 하는 부분들은 하나의 어플리케이션에 모두다 상주 하게 되고 이 어플리케이션의 각각의 쿠폰들을 담당하시는 여러 담당자 분들이 한꺼번에 이제 커뮤니케이션을 하게 되는 거죠 물론 이제 애플리케이션 이외에 이제 데이터 레이어에 대한 부분들도 존재를 하였는데 이제 보통은 이제 어플리케이션을 담당하시는 분들이 이제 개발자 라는 타이틀을 가지고 이 안에서 이 작업을 하고 계시고 그 다음에 이제 데이터 이쪽 완력 데이터 쪽에 관련된 부분들은 이제부터 이제 dba 라고 하시는 로 를 가지는 분들이 이제 포토 관리를 해 주시죠 4 이에 반해서 맑고 서비스의 경우에는 한 사람 거의 제 1 2 사람들은 되게 이제 소 규모의 어인 팀이라고 얘기하고자 아깐 좀 애매하긴 하지만 소금 5의 그룹들이 모여서 각각 개별적인 서비스를 담당합니다 그래서 2분들은 그 서비스의 개발 그 다음에 디플로이 그다음 이후에 운영까지 를 담당하는 것을 기본적으로 이제 마이크로 서비스 아키텍처 레벨에서는 이제 봉고를 하죠 물론 제 각각의 어떤 마이크로 서비스 레벨에서 어떤 데이터나 데이터에 대한 관리가 필요하다 라고 하면 그런 것들은 기존의 이제 모놀 2d 의 경우에는 통상적으로 이제 하나의 어플리케이션이 존재를 하기 때문에 데리 k 땐 어떤 하는 단일 스토리지 를 써서 다니엘 라코스테 를 사용하게 되지만 마이크 서비스의 경우에는 자기 서비스에서 필요한 데이터는 자기가 관리하고 그 데이터가 그 데이터를 따른 서비스 에서 만약에 필요하다 라고 하면 요런 레스트 불같은 & p 를 가지고서 제공을 하게 됩니다 종합해서 보면 어 제가 정리한 건 아니고 마틴 파울러 님이 정리를 해 주신 내용인데요 어제 앞에서 오면 크게 마이크 서비스 아키텍처 가지는 특징은 요와 같은 크게 9가지 특징 으로 나눠집니다 까 컴포넌트가 아니라 개별적인 서비스의 형태로 별도로 나와야 되고 그 다음에 그 서비스를 책임질 수 있을 만큼 조직적인 역량이 되게 되고 즉 두 세 명이서 나눠서 서로 그대 직계 있던 형태의 에 메리케이 땐 서비스의 운영이 가능한 체계를 조직적으로 지원을 해야 할 수 있어야 된다는 인기구요 그 다음에 한번 코딩하고 이건 나 몰라라 하는 게 아니라 이건 네 어 이거 내 자식이라고 하는 프로 적 개념의 프로 더 개념을 이제 가져야 된다 라는 겁니다 그 다음에 통신의 관련해 가지고는 표준적인 웹 방식의 엔드포인트 와 그 다음에 내부적인 메시징 시스템은 이제 가지고 있어야 되는 거구요 그 외에도 일단은 거버넌스 라든지 데이터에 관련돼 가지고는 적극적으로 이 일을 진행하는 사람들에게 미움을 해주고 그 다음에 적은 시스템 들이 많이 만한 많이 만들어지기 때문에 그거에 부합하게 자동화 라고 하는 프로세스가 뒤쪽에서 백업을 해줘야 된다는 이야기를 하고 있습니다 그 다음에 전체적으로 드 기존의 이제 무얼 이득과 달리 트랜잭션이 라든지 이런 개념들을 제대로 지원하지 않기 때문에 그런 부분들에 대해서 만약에 실패가 발생했을 때 어떤 식으로 대응할 건지에 대해서 세일에 대한 부분들을 사전에 고려한 디자인 스가 소피를 가지고 있어야 된다 라고 얘기합니다 그래서 이렇게 8가지 부분들이 뭉쳐서 궁극적으로는 뭐냐면 2분도 시너리 디자인이라고 해서 점진적으로 진화가 가능한 악 택 쳐 링을 추구를 해야 된다는 것을 기본적인 마이크로 서비스 아키텍처 라고 보실 수 있을 것 같습니다 4 그래서 이런 컨셉을 바탕으로 해가지고 저희가 이제 어 2개 정보 아니라고 하는 서비스를 어카운트 시킬 t 라고 하는 서비스를 플레이어들에게 제공하기로 했습니다 어이 부분이 그러니까 저희가 이제 어제가 이제 부재에서 카카를 이용한 메시징 시스템 이라고 했는데 어 원래 카프카 를 이용한 메세징 서비스 시스템을 만들려고 한건 아니고 요 개 정 보 아니라는 걸 하다보니 그 서비스가 필요 해져서 이제 저희가 이제 진행 하게 됐고 그 과정을 이제 설명드리도록 하겠습니다 는 대정부 아니라고 하는건 특히 이제 개정 보안은 이제 저희가 인데 겪은 제 개정 보안 중에서 이제 그 해외 쪽에서 특히 이제 개정을 탈취하고 이미 이제 노출된 id 나 패스워드 를 가지고 이제 해외 쪽에서 개정을 이제 펼쳐 하는 그런 사례들이 이제 있었고 그런 사례들이 이제 대응하기 위해 가지고 개 정부 아니라는 계속 보안 이라고 하는 서비스를 저희가 이제 제공하기로 이제 생각을 했는데요 어 기본적으로 제공해주는 기능들을 간단합니다 일단 어떤 플레이어가 게임 저희 게임상의 로그인을 했다 라고 하면 2분이 로그인한 ip 와 그 다음에 그 나라가 어디인지를 이제 저희 쪽 개념을 저희쪽에 이제 관람을 통해서 정보를 제공해주고 만약에 그런 사태가 실제로 물론 뭐 플레이어 분리 의도하지는 않았겠지만 그런 사태가 만약에 버렸을 때 1년에 이제 액션을 취할 수 있도록 갈 관련된 기능들을 제공하는 게 뭐 풀었습니다 자기가 제공해 되는 기능들은 뭐냐면 너 아무것도 안 하거나 아니면 뭐 sms 나 이메일이나 아니면 저희 이제 인게임 네 이제 플레이어 멧세지 라는 걸 통해서 뭔가 발생을 했습니다 라고 하는 사실을 이제 알려 드리거나 혹은 게임에서 일시적으로 쫓아 내거나 이건 허용 되지 않았으니까 당신은 해외에서 플레이할 수 없어요 라고 추천하거나 그것도 아니면 위치적으로 계정을 잠 가서 이후에 이제 플레이어 분들이 별도의 인증 과정을 통해 가지고 개정을 해지할 수 있는 그런 체계를 지원하는 게 기본적으로 제공하려고 하는 기능의 목표였습니다 물론 이제 요 기능이 전에 저희가 이제 아무무 라고 해서 그 아무 보라고 하는 프로젝트를 별도로 통해서 패스워드 업데이트 캠페인을 하고 있었는데 해당되는 관련된 기능도 마찬가지 린지 연결해서 잘 돌아가야 되는 게 기본적인 전제조건이 얻습니다 자 이런 조건을 바탕으로 해서 생각했을 때 어 그냥 언뜻 양 생각을 해보면 가장 간단하게 아 어디에서 들어왔는지 를 체크해 주는 ip 를 베이스로한 ip 체크 가나 있으면 될 것 같고 그 다음에 저희가 이력을 플레이어 분들한테 제공을 해야 되기 때문에 이력을 관리해주는 별도의 서비스를 하나 만들면 될것 같고 그 다음에 아까 말씀드린 것처럼 이제 액션을 취해야 줘 그러니까 알림을 드리거나 아니면 은 게임에서 사건 그것조차 내거나 혹은 아예 그냥 계정을 잠겨 버리는 그런 일 년에 이제 액션을 하는 이 어떠한 2c 키레 t 라고 하는 3개의 서비스를 b 파일을 해서 제공을 하면 되겠다 라는 생각이 들었습니다 등이 이제 그냥 저 초기에 리퀘 멘트만 딱 놓고 봤을때는 뭐 그냥 이렇게 진행을 해도 무난하게 진행을 할 수 있었을 것 같았습니다 4 이렇게 딱 생각을 해보니까 그다 마음은 들지 않았어요 야 이게 까악까악 앞전에 이제 그 말코 서비스의 특성 이라고 했던 부분들을 보면 그렇게 위배 되지 않았어요 별도로 타 서비스 라고 하는 객체로 다 뽑았고 그 다음에 각각 들이 각각 뜰이 이제 이용할 수 있는 외부의 참조할 수 있는 웨스트 브랜드 p 그리고 또 이제 러스트 플라스크에 맞춰서 다정 일을 해왔고 했는데 약간 이게 좀 개를 좋겠습니다 어느 부분이 계리직 왜냐하면 에 요거 분인데요 자 이제 마이코 서비스 라고 하는 부분들은 말씀드렸던 것처럼 되게 소 규모의 기능 역할을 하는 부분들을 저희가 이제 롤을 주고 그 롤의 해당된 서비스를 저희가 만들어서 개별적으로 기능 동작을 하면 됩니다 그런데 그 기능 동작에 대한 제어 부분을 금 누가 담당을 해야 되는 거냐 라고 하는 거에 대해서 고민 지금 생겼죠 여기서 보시면 ex 터널이 라고 하는데서 아 그러면 ip 도 예에서 ip 체크를 통해서 ip 도 봐야 되고 그 다음에 그거에 대한 1억도 남겨야 되고 그 다음에 이게 해외에서 동작 한 거다 라고 하면 뭔가 이제 일 년에 액션을 취하는 그런 동작까지 를 누구 하냐면 요 ex 터널 이라고 하는 곳에서 제어를 하게 됩니다 궁극적으로 하면 결국에는 저희가 ex 턱 이라는 대여 가는 대강 이제 이런 식의 약간의 이쁜 이라든지 뭐든지 라고 하는 그런 컨디셔너를 1 제어 분들이 요 익스 터널 이라고 하는 모듈 쪽에 어쩔 수 없이 반영돼 4 저부분이 그러면 과연 마이코 서비스를 한다 라고 하는 부분에서 과 양뜰아 선거 만능 거냐 예를 들어서 어떤 하나의 변경 같은게 생겼을 때 예를 들어 이제 물 거에 대한 변경이나 ipc 커 에 대한 변경 혹은 어카운트 시크리트 위쪽에 관련된 변경이 생겼을 때 그 변경의 관련되 가지고 어쩔 수 없이 익스 터널 이라고 하는 거에 대해서 디펜더 씨가 생기는 보고 그 디펜드 시 에 의해서 추가적인 뭔가 작업을 하게 된다 라고 하면 드 최종적인 저희가 이번에 50으로 이 아키텍처 라고 하는 이번 오시는 리디자인 이라고 하는 부분들을 우리가 과연 만족시켜 가면서 개발을 하고 있는거냐 라고 하는 거에 대해서 약간 패션이 들었습니까 그래서 이거는 좀 다른 관점에서 좀 살펴 봤는데요 보면 어 예를 들어 이제 사용자가 편력을 로비를 합니다 로그인을 하면 그 로그인 된 데이터가 ip 체크를 통해서 아 이제 국가에 대한 식별이 이루어지고 식별된 국가에 대한 정보를 바탕으로 로깅이 이루어지고 그 다음에 그 결과를 다시 바탕으로 해서 1년에 이제 액션이 취해주는 기존의 이거를 저희가 그 이 품은 같은 그런 컷 어떤 액션에 대한 컨트롤이 아니라 데이터에 대한 품목으로 이걸 다시 한번 볼 수 있지 않을까 라는 생각이 들었어요 자 그렇게 보면 이게 뭐가 되냐 하면 이런 일 년에 데이터의 흐름 으로 우리가 뭔가를 사고를 좀 전화를 해보면 사고의 전환을 통해서 on 방식으로 흐름을 볼 수 있지 않을까 라고 생각이 들었습니다 이렇게 보면 빨 수가 되죠 예 그래서 요 시점부터 아 이걸 우리가 제대로 구현하려면 마이크로 서비스 간에 이 인터 디펜더 씨를 좀 남아 설 수 있는 새로운 걸 해보려고 하면 우리가 필요한 것은 있어서의 필요한 것은 버스 다 라는 생각이 들어서 그러면 이걸 한번 해보자 라고 생각이 들어 그 버전에서 말씀드렸던 메세징 서비스를 구원 하게 됐고 일이 2 에 원래는 간단하게 하면 믹서를 이라는 곳에 따라 저희가 만약에 이것을 딜리버리 하는데 만약에 그 처음 목적을 뒀다 라고 하면 그냥 입성하기 라는거 에다가 그저 그런 이쁜 가서 이 치는가 케이스 물을 두고 작업을 하는게 오히려 더 빨라 쓸 수도 있습니다 근데 제대로 증 마약 개발을 해보자 라고 하면 이게 소 잡는 칼이 등장을 하게 되는 거죠 저희가 이제 닭만 잡음 되는데 한번 수모 가지를 쳐 볼 수 있는 큰 칼을 한번 만들어보자 라고 생각이 들어서 작업을 하게 됐습니다 자 그래서 저희가 이제 구어 구상을 한 건 뭐냐면 이 일련의 메세지 퍼스 인데요 ex 라익 써 널 이라고 하는 최초의 인제 웨어 속 점 에서 목인 에 관련된 어떤 정보가 입력이 되면 최초로 는 그 해당되는 정보를 아 맨 처음 이 이제 컨 수행하는 너는 뭐냐면 저 ip 체크 라는 곳에서 그 옥이네 관련해 정보를 최초로 봤습니다 그래서 이 ip 체커 가 받고 기존의 이 암호 라고 했던 시스템도 내내 이제 로긴 에 관련된 이벤트를 받기 때문에 이 두 군대로 아 정보 흘려 주면 되겠다 그리고 ip 체커 가 본인이 ip 를 체크한 다음에 거기에다가 이 사람이 지금 한국에서 접근한 건지 아니면 중국의 썪은 한 건지 아니면 미국의 썼고 난건지 관련된 정보를 다시 태백 입에 3집 버스로 다시 해주는 거죠 브라운 더하면 이렇게 ip 체크 에 의해 생성된 메시지가 로고의 의해서 기록이 되고 실제 오이 플레이어가 어느 국가에서 접근해 가지고 어떤 ip 글 오게 됐습니다 라고 하는 로딩을 남기고 그 다음에 그 국가 정보를 바탕으로 해서 어카운트 체크 어라 고어 가운데 시크리트 모듈 쪽에서 일 년에 액션을 추구하는 과정으로 우리가 메세지 퍼스가 동작의 되면 우리가 몰라봐 우리가 2개 정부 아니라고 하는 부분에서 s 소스를 잘 써 볼 수 있겠다 라고 생각이 들었습니다 그래서 저희가 이제 개별적인 아까 이제 ip 체크 라든지 로고 라든지 아니면 어떤 뜻이 키티 부분을 하나의 어떤 마이크로 서비스 라고 본다 라고 하면 이 마이크로 서비스는 특정 메시지를 컨 스윙하는 역할을 하나 가지고 그 다음에 그거에 상황에서 어떤 필요가 있다 라고 하면 또는 뿔 다른 새로운 형태의 메시지를 프로세싱 하는 구조를 가지는 하나의 존재로 볼 수 있겠다 라고 dpi 를 했습니다 그래서 예를 들어서 인지 e i o u 요 노드가 이제 ip 체커 라고 하면 이제 녹여내 관련된 이벤트를 컨 스윙 하고 실제 프로듀싱에 관련된 것은 국가 구도를 반영한 이벤트 메시지를 이제 퍼블리싱 해주는 거죠 그래서 만약에 요 이벤트 메시지의 요 이벤트 메시지를 만약에 추가로 어떤 관심있는 따른 마이크로 서비스가 있다 라고 하면 아 그거는 추가적으로 요 의 마이크로 서비스가 이 새로운 e 생성된 요 이벤트 메시지를 서비스 프라이버시 에서 컨 스윙을 한다고 하면 자연스럽게 그 플로우가 추가적인 어떤 제어의 관련되서 전체적인 플러그로 제어를 하는 게 아니라 데이터에 대해서 내가 이 데이터를 북의 따라고 설정 하는 것만으로도 충분히 전체적인 플로 나 새로운 플로어로 2분기 라 이런 부분들이 가능할 거라고 생각했습니다 그래서 저희는 이러한 메세지 버스를 구조로 우성 하기 위해서 이제 카페라 을 기반으로 해서 작업을 하기로 했습니다 왜 값 하냐 저희가 이제 카프카를 고려했던 여러가지 이유중에 이제 가장 첫번째로 뭐냐면 현 적어 이인제 그 오픈 소스 계열의 오픈 소스 계열의 이 큐잉 시스템 들 가운데서 킹 엔진 가운데에서 각각 아 제일 빠른 속도를 보여줍니다 웃어 가장 빨라 구요 두번째는 아끼 책 쳐 자체가 되게 심플러스 입니다 일단 다운로드 받아 가지고 그냥 여러분들이 쓰시는 개발환경 상에서도 다운로드 받은 다음에 그냥 실행 땅 하면 실행이 되죠 그래서 설치나 운영이나 이런 측면에서 봤을 때도 카펫과 가 주는 매력 쯤이 또 있었구요 다음으로는 뭐 여러가지 분산 q 들이 가지고 있는 여러분을 매력 포인트 중의 하나이긴 하지만 분산된 환경에서 실제 이제 운영이 가능하기 때문에 어떤 특정 노드의 대해서 따온 이 발생했을 때 그거에 대한 빼 오버 와 이런 부분들에 대해서 상당한 안정성을 가지고 있을까 안정성을 보장을 해주고 있습니다 그래서 이런 부분들 때문에 저희가 이제 카프카 를 통해 가지고 아 이런 서비스 ems 싶어서 를 붙여 구성해 보자 라고 생각을 해서 진행을 해봤습니다 근데 진행하다 보니까 카프카의 특성 중의 하나는 뭐냐면 같아 엔진과 카프카 이제 클라이언트 모듈 간의 상호 디펜더 씨가 있습니다 그래서 만약에 우리가 카프카를 더 업그레이드 시켜 보고 어 카프카 를 최신 버전으로 업그레이드 시킨 다든지 이런 과정에서 만약에 이 값과 엔진과 실제 사용하는 이 클래스 모듈 간 의 디펜드 c 를 효과적으로 제어를 못하면 운영 상에서 이제 좀 문제가 발생할 수 있겠다라는 생각이 들었구요 그런 이유 때문에 저희가 접근하는 방법은 아예 요번 메세지의 서비스 2 카프카 를 기반으로 한 2월 멧세지 큐잉 자체가 하나의 독립적인 마이콜 서비스가 되도록 만들자 라고 생각을 했습니다 그래서 이런 분들을 위해서 카프카 앞단에 실제 값과 쪽으로 데이터를 전송할 주어 숫자 적으로 카프카 쪽으로 데이터를 전송하는 과정에서 는 별도의 퍼블리셔 라고 나는 절대 웹 어플리케이션을 두고 해당되는 데이터에 대한 전달 부분은 실제 이제 이 카프카 2 메세징 시스템으로 데이터를 전달하기 위해서는 이 퍼블리셔를 통해 가지고 2 http post 방식으로 데이터 가 인입 되도록 했고 그 다음에 실제 이 메시지 큐 로부터 어떤 데이터를 컨 스윙하는 다정을 위해서 별도의 이제 컷은 애플리케이션을 뜨고 거의 컸음 어플리케이션이 대행을 해서 3 2 개별적인 연동이 되는 타겟 마이크로 서비스 쪽으로 데이터를 전달하는 방식을 어 전달하는 방식은 이제 구축을 했습니다 그래서 실제적인 카프카 레벨의 디펜더 씨는 이 메시징 서비스 레벨에서 만 고착화 되도록 이 안에서만 존재하도록 저희가 디자인을 했고 이 외에 외부에 이제 익스 털 한 마이코 서비스들 간의 상호 관계는 2 jean 베이스의 http 프로토콜로 연동되도록 설계를 했습니다 농 과정에서 아까 말씀드렸다 아까 이제 말씀드렸던 것처럼 실제로 이제 저희가 개별적인 연동이 되는 마이코 서비스 엔드포인트 를 에 대해서 메세지를 실제로 보내 주고 그다음에 그거에 대해서 어떤 생성된 메시지를 다시 받아온 받아오고 그거에 대한 처리 부분들을 이제 수행을 해야 되는데요 그런 부분들이 이제 컷씬 뭐 부분에 해당되는 로 집들이 반영되도록 했습니다 그래서 이 컷은 많은 내부적으로는 이 앤드 피트 에 대해서 저희가 이제 뭘 부분들을 이제 고려했을 때 실제로 이제 엔드포인트 같은 경우에 저희가 이제 연동이 되는 대상 엔드포인트 가 잘 살아 있는지 죽어 있는지 모를 경우도 있고 실제로 일시적인 장애 현상에 빠질 수도 있습니다 4 그런 상황에 10 그냥 상황을 이 배수진 q 가 어느 정도는 대비할 수 있도록 제어를 해주기 위해서 깎아 레벨에서는 카프카 에서는 이 토픽 이라는 단위로 데이터 관리 되는데 이 토픽 에서 일련의 이제 트랜잭션 개념들을 지원할 수 있도록 관련된 기능들을 제공을 하는 것을 목표로 했습니다 그래서 일시적으로 이 타겟이 되는 & p 가 다운이 되거나 이렇게 하더라도 내부적으로 옵셋 권리 를 통해서 일정 기간 동안에는 데이터의 유실 없이 관련된 데이터가 카프카 레벨에서 입에 세진 큐 시스템 레벨에서 보관되고 있다 가 실제 이 & p 가 다시 복구 됐을 때 데이터의 전달을 개런티 할 수 있도록 체계를 잡았구요 그 다음에 이 각각 별로 받을 수 있는 데이터에 대한 추상적인 볼륨 자체가 또 다를 수 있기 때문에 그것들을 위해서 별도의 이제 내부적인 들이 벌써 에 대해 대한 커피 국회의원들을 별도로 가할 수 있도록 에 별도로 설정 을 가져왔습니다 자 이렇게 했을때 이제 좀 문제점이 뭐냐면 저희가 어떤 특정 엔드 포인트의 입력을 주고 그거에 대한 출력을 받아서 다시 그것을 메시징 추의 반영합니다 그런데 이런 식의 까 펜션에 임프 과 아웃풋이 있는 그런 엔드포인트 들이 늘어나면 늘어날수록 하나의 메시지에 플로우의 하나의 어떤 이벤트 메시지에 대해서 2분들이 그 이벤 그 & p 를 거쳐 나올 때마다 빵 찌게 되는 효과가 발생할 해요 이제 그 & p 가 그냥 컨셉인가 하고 그냥 말면 럴 이슈가 없는데 컨 스윙을 하고 그것에 상응하는 어떤 프로듀싱 아웃 쿠스 다시 이제 메시징 q 적으로 반영을 하게 되면 전체적으로 메세지 큐가 받는 부하량 자체가 드러나게 됩니다 근데 그런 부분들에 있어서 저희가 특정한 케이스에는 그런 부분들을 이연두 포인트가 제어할 수 있도록 관리를 관련된 권한을 주는 걸 목표로 했고 그 권한의 어떤 방식으로 처리 했냐면 이에 cdp 저희가 이제 트 포인트 호출 했을때 그거에 대한 리스판스 스테이터스 코드로 204 라고 하는 로 콘텐츠 라고 하는 스파이스 코드가 저희가 받게 되면 해당되는 페이로드 를 아무리 그쪽에서 뭔가를 l 한다고 하더라도 이제 무시하는 체계로 접근을 했습니다 그래서 이런 방식을 감 일을 하게 되면 하다 에 어떤 룩이 이벤트라고 2 로빈 이라고 하는 이벤트 메시지가 발생했을 때 여러개 애드 포인트로 동시에 데이터를 서비스가 이 데이터의 관심 있다라고 하는 여러 개 엔드포인트 드로 저희가 데이터를 동시에 싸질 수 있을 뿐만 아니라 이 어떻게 짱 엔드포인트 예를 들어서 이제 ip 체크 쪽에서 ip 체커 가 예를 들어서 한국에서 오브 인한 경우다 라고 하면은 굳이 이거를 대정부 아니라고 하는 쪽에서는 굳이 캐낼 필요는 전혀 없거든요 까 해외에서 발생한 케이스 만 케어를 하면 되기 때문에 그래서 이 ip 체커 가 그런 경우에는 앞서 말씀드렸던 그런 컨트롤 링을 통해 가지고 전반적인 데이터 볼륨 자체를 제어할 수 있는 체계를 구성을 했습니다 자 이렇게 구성된 부분들에 어져 희는 이제 요런 약간 좀 글씨가 흐려 가지고 잘 안나오는데 예 이런 제이스 스키마를 통해서 커피 대신 을 통해서 관리하도록 했구요 대략 한 뭐 이렇게 보시는 것처럼 뭐 어떤 내가 이벤트 메시지 즉 이제 값과 용어로 치면 어떤 토픽을 받을 건지에 대해서 데피니션 과 그 다음에 핸드폰 어떻게 되고 이게 스트리밍 방식으로 동작을 할 건지 아니면 단방향 컨 스윙 방식을 굉장할 건지에 대한 기타 레논 부분들에 대한 내 테이션을 가지도록 설계를 했구요 2분들의 업 별도의 길에 퍼즐을 통해서 관리 하도록 했습니다 그래서 어 최초에는 2 이 이제 배스 시스템이 개정 불안이라고 하는 용도로만 이제 사용되기 했지만 이후에 이제 조금 더 활용 폭을 늘려 가지고 다른 시스템 들이 실제로 있는 메세지를 종합적으로 바다 소리 할 수 있는 형태로 나아가고 있습니다 그런데 이렇게 나아가는데 매번 이런 커피 레이 션을 사람이 개입을 해서 수정을 해 주고 이렇게 하는 것보다는 딜러 퍼 스토리의 일 년에 이제 컴필레이션 을 관리를 해주고 만약에 추가로 내가 연동할 내가 입에 시즌 서비스를 이용해서 추가로 연동을 하겠다 라고 하면 관련된 내용들의 pr 메시지로 저희에게 보내 주는 거죠 그럼 이 pr 멧세지 에서 뭐지 를 하게 되면 저점으로 해당되는 엔트리 포인트를 저희 이제 ems 서비스 쪽으로 추가로 요청을 해서 추가 파티션을 만든다는 그가 북한의 파티션을 만든다든지 아니면 카피 그 레이션 변경된 컴퓨터 션은 이퀄 썸머 레벨로 반영 시켜서 연동에 대한 부분을 자동화 시키니 자동화 시키는 작업까지 를 마무리 했습니다 그래서 전체적인 과정을 통해 가지고 4 데이터에 대한 관리 라든지 그 다음에 컴퓨 회원의 관리 부분들을 이제 사람의 개입 없이도 이제 볼 수 있도록 어느정도 이제 구성을 했는데요 그래서 어 저희가 이제 시스템 이 이제 어느정도 얼추 이제 안정화가 되는 시점까지 가 어제 된 이후에 실제로 이제 확인했을 때는 대략 1일 단위로 첫 욕망 권 정도 이제 데이터 트래픽을 처리를 하고 있고 4 지금은 이거 보다는 조금더 는 형태로 데이터를 핸들링을 하고 있습니다 예 이게 이제 왜 수산 는 카린 야 라는 부분을 이제 간단하게 설명 드릴 건데요 예 각각의 보면 이제 퍼블리셔 도 잘 돌고 있고 클러스터 자체도 예 그렇게 무리를 하지 않으면서 잘 들고 있습니다 라며 것은 모두 돌고 있는데 전체적으로 보시면은 이 시스템을 구성하기 위해서 저희가 이 시스템은 이제 aws 기반으로 이제 구현을 했는데 4 이시테 인스턴스가 퍼블리셔 쪽에는 제가 2개 그 다음에 클러스터의 는 6개 컨슈머 는 대강 8개의 노드를 가지고서 구현을 했습니다 전체의 들어간 리소스 역량을 보면은 대략 1 64 게 64 cpu 코어와 272 이라 의 메모리를 써서 저희가 시스템을 구현 했습니다 물론 제 4의 aj 캅 카 클러스터 안정화 시키는 데도 좀 코스트가 좀 들어가구요 그래서 이게 이제 수정 는 칼이 되는 거죠 실질적으로 저희가 이제 개 정부 아니라고 하는 서비스 관점 만 딱 놓고 가서 그 서비스를 만약에 부연 했나 라고 하면 에 이거 보다는 훨씬 더 적은 고스트 다음에 시간적으로도 훨씬 더 적은 시간 안에 9월을 마칠 수 있었을 거라고 생각을 합니다 4 과연 그런 식으로 개발을 하는 것 자체가 과연 올바른 것이냐 궁극적으로 보면 아까도 말씀드렸던 그런 익산 레벨의 그 마이크로 서비스 간에 어떤 디펜더 씨를 그대로 유지를 시켜주는 것은 시간이 지나면 그런 부분들이 테크니컬 대부로 계속 남게 되는 거고 어느 순간에는 그런 부분들이 맑고 서비스 3장에서는 & 폰트들이 늘어난 것 자체도 일종의 이제 관리에 대한 얻으니 이제 계속 나라 5 그 관리된 버드는 다가오게 되는데 그런 부분들을 투명하게 해 놓지 않은 상태에서 계속 진행하는 것 자체가 이제 문제가 될 수 있다 라고 생각하기 때문에 음수 잡는 칼을 요정들이 소스를 들여서 진행을 해봤습니다 4 저희가 이제 이걸 진행하는데 이제 aws 를 썼고 그 그 다음에 초기 단계부터 워낙 이제 연동 해야 되는 대상 이라든지 대상에 대한 인식이 라든지 이런 부분들이 많기 때문에 통합적인 로깅 이랑 다음에 통합적인 대시보드 부분들을 애초부터 계획을 했구요 그 다음에 실제 이제 아까 말씀드렸던 것처럼 카프카 쪽에 대한 튜닝 부분들을 마무리 하는데 이런 통합적인 로깅 이나 아니면 은 이런 대시보드 분 대 15분 아 다시 불 같은 기능들이 많은 도움이 됐습니다 이 과정에서 저희가 이제 어둠 점이라고 하면 우선은 어떻게 하면 라 이베이 턴 마이코 서비스들을 우리가 이 플랜테이션 할 수 있을까에 대한 이 사이트를 다시 한번 얻을 수 있었구요 두번째로는 아까 그림에서 보시는 것처럼 개별적으로 각 마이크로 서비스들이 서로 어디 크로노스 하게 데이터를 전달 받을 수 있고 그 다음에 마이크로 서비스와 마이크로 서비스 간에 서로 뒤편 다시 없는 상황이라고 하면 각각 뜰을 서로 패럴 헬로 프로세싱 을 시킬 수 있습니다 그런 부분에서는 전체적인 우리의 서비스가 어떤 서비스가 어떤 기능을 어떤 총괄적인 어떤 서비스가 기능을 한다고 봤을때 그건 엔드 트 n 들어보게 되면 기존의 단순히 엔드 포인트의 체인을 통해 가지고 어떤 특정 & p 를 부른 다음에 다른 a 라는 & p 를 부르고 b 란 & p 를 보고 씨라는 & p 를 불렀다 라고 하는 그런 코드 레벨의 어떤 체인링 을 통해 가지고 구원을 했을 때 퍼포먼스 보다는 훨씬 더 좋은 퍼포먼스를 얻을 수 있었구요 그 다음에 말씀드렸던 것처럼 마이크 서비스 환경 상에서의 각 서비스 간의 인터뷰 편견 c 를 최소화 시킬 수 있는 방안을 찾았다 라고 볼수 있을것 같습니다 그 다음에 마지막으로는 전체 시스템 전체가 되게 플랫한 형태로 훌리 디스트리뷰터 되는 체계를 갖추어 갖출 수 있었고 이 말에 어떤 문제나 않는 6초 애그플레이션 에 대한 보증이 c 가 나왔을 때 행적으로 확장 가능한 체계를 전반적인 시스템 레벨에서 확보할 수 있는 기틀이 있다라고 설명이 될 수 있을 것 같습니다 마지막으로 이제 저희가 어떻게 일을 하는지를 간단하게 설명을 드리도록 하겠습니다 으 저희는 마키 말씀드렸지만 이제 악기에 텍스트의 변화는 어떻게 일을 에 어페어 일을 하는지에 대해서 다시 한번 질문을 하고 이 부분들에 대해서 우리가 어떻게 할건지 를 이제 계속 캐스터 닝 을 한다고 보고 있습니다 그냥 뭐 1 같은 경우에는 큰 시스템이고 나는 사람인 보여드리고 보셔서 아시겠지만 대칭으로 나눕니다 어플리케이션 개발자들은 어플리케이션 그 어플리케이션 레벨에서 도 프론트 핸드백 엔드 가 다 나눠지게 되는데 그 외 나눠진 부분들이 결국 하나의 코드 베이스의 집중 되는 거죠 그러려면 그렇게 하다 보면 전체적으로 배포 타임도 잡고 늦어지게 되고 뭔가 100% 한번 하려고 하면 되게 큰 일을 해야 되고 코드 리뷰도 않은 사람들이 이리 코드를 그 일을 하는 게 아니라 이 코드의 관련된 전체가 다 보여서 코드 리뷰를 해야지 서로 얼굴이 멘트가 맞아줍니다 그러다 보면 전체적으로 d4 2탄 늦어지게 되고 그치 플레이 타임은 결국에는 왜건 어떤 배포한 갱에 대한 피드백을 얼룩 타이의 받을 수 있는지 얼마나 빨리 가 될 수 있는지 랑 붙이 켤 되는 거죠 그리고 개발자 입장에서의 가장 큰 문제점은 뭐냐면 하나의 코드 게 있죠 이 코드 베이스만 봐야 됩니다 다른거 해볼 수 있는 여력이 없어요 여지가 없는 거죠 이번 개인의 성장과 도 크게 밀접하게 관련이 됩니다 바낭 서인 새 맑고 서비스의 경우에는 충분히 잡고 빨리 반응할 수 있죠 그 다음에 움직이는 것 자체도 되게 빠르게 움직일 수 있습니다 만약에 새로운 기능에 대한 요구가 들어갔다고 하면 개발을 그냥 간단하게 그 기능에 대한 부분들을 개발을 하고 기존에 있던 영계 포인트들을 새로운 연계 포인트로 가볍게 스위칭 말해 주는 걸로 새로운 기능을 적극적으로 반영 시킬 수가 있습니다 만약에 어떤 특정 기능을 제가 아주 새로운 언어로 예를 들어서 이제 모두 하는 것도 이제 지치고 힘드니까 공부하는 거 한번 해보자 란 생각이 들었다고 하면 하시면 되는 거죠 4 여기서 모처럼 3배나 만들어서 구라는 거하는 것을 아주 작은 기능을 대응하는 형태로 분이 작업해서 실제로 베풀어야 한 다음에 그에 관련된 연계 폰트들을 셋업을 해서 기능을 만들면 아주 쉽게 새로운 것들에 대한 챌린지 도 일어날 수 있다 라고 보고 있습니다 저희는 어떻게 하냐면 어 기본적인 방식은 이폰 텐더 빽 엔드를 철저히 9분하고 스텐 3단 자는 프론트엔드 어플리케이션을 직접 개발을 하고 넉백 엔드 는 - 인드라 나름으로 개발을 진행하는 걸 원칙으로 하고 있습니다 그 다음에 폰트 인도의 빼 겐트 가 개발을 진행할 때는 서로 모핑 베이스도 로 개발을 진행 합니다 그래서 목사의 저희는 이제 목회 버린 아니면 포스트맨 같은 그걸 폭행 사이트를 주로 이용하는데 그의 묶인 개념을 그 해당되는 폭행 사이트를 이용해서 이 페이로드 계약을 만들고 각자 개발을 진행한 다음에 서로 이제 맞추는 방식으로 개발을 진행하고 있습니다 입안 과정에서 저희가 이제 가장 중요하게 생각되는 부분들을 뭐냐면 목표는 가장 심플하게 접는다 그 다음에 도달 가능한 목표를 잡고 그 어치 보물이 뭔지 를 가장 숍 게이터 레이 션 타임 자체를 길게 접지 않고 보통 아니 주 4 뭔가 달성할 수 있는 어찌 버그를 설정을 합니다 다음으로 이제 개발팀 내에서 모든 기술에 대한 권한이 나설 선택에 대한 고난은 개발팀 내에서 모두 이미 민원 합니다 여기서 이제 층이 라고 얘기를 하는 것은 아크에 마이크로 서비스를 담당하는 사람들이 이 우리가 어떤 기술을 써서 어떻게 개발할 지는 이제 결정 하게 하는 거죠 그 다음에 가장 어느 경우에도 눈 영상에서 문제가 될 수 있는건 로 스토리즈 에 관련된 부분인데 소르 마이크로 서비스 간의 쉐어링 된 스토리지 나 아니면 로 필터로 는 사용하는걸 가급적 금하고 있습니다 물론 이게 이제 하나의 거부할 수 있겠나 하게 되는데 그런 정도의 가방 에서는 강요합니다 하지만 그 거의 위에 어떤 풀이나 어떤 비수를 그 다음에 어떤 컨벤션 뭐 tdd 를 할지 말지 2p 를 할지 말지 등등은 에 강요를 하지 않습니다 이러한 부분들을 통해서 와 물론 이제 어떤 정형화된 방식을 통해 가지고 얻을 수 있는 거버넌스 를 통해서 얻을 수 있는 저 장점 부어 있을 수 있긴 하겠지만 저희 조직 같은 경우에는 뭐 그렇게 큰 조직이 아니 뭐 억 음 저 아닌 것도 이해가 될 수 있겠습니다만 강요하지 않음으로써 새로운 것들에 대한 도전 시동 그 다음에 그런 개헌에 것들을 서로 공유할 수 있는 것들 이런 부분들이 음부터 큰 장점 이지 않을까 싶습니다 너무 늘 발표는 여기까지 없구요 원래는 이게 맨 마지막 상태의 위하 이게 뭐 이런 멘트가 원래 나와야 되는데 저희가 최근에 책 등 체력이 더 * 되서 그런 말씀을 못 할 것 같고 예 그 라이즈 에서 진행하는 엔진의 린 과제 라든지 않는 재미있는 어 시도 같은 것들 부분에 대해서 궁금하신 분들이 있다라고 하면 요 사이트에서 관련된 추가 정보들에 조금 더 살펴 보실 수 있을 것 같습니다 네 감사합니다