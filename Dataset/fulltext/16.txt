제목: [NDC] 〈달빛조각사〉 엘릭서를 이용한 MMORPG 서버 개발

안녕하세요 어 이번에 엘릭서 를 이용한 mm rpg 서버 개발이 라는 주제로 발표를 하게 된 김민욱 이라고 합니다 먼저 제 소개를 하자면 어 주로 mlb g 를 개발해 왔구요 그 주로 c 샵이나 c 플러스 플러스 언어를 개체 지향 언어를 이용해서 어 개발을 해 왔구요 어 지금 달빛조각사 라는 팀에서 어 서버 언어로 엘릭서 라는 언어를 사용해서 서브 개발을 하고 있습니다 엘릭서 라고 어 어 언어는 어 2011년도 신생 언어입니다 아 아주 생소하고 어 한생 언어 있구요 어 저도 실제 이 팀에 합류하고 나서 어 접하게 된 어느 입니다 실제 업무나 어깨에서 접하기 힘든 언어라서 저도 잘 모르는 언어 였읍니다 아 그래서 어 이 발표를 하기 전에 상당히 고민을 많이 했어요 그래서 엘릭서 라는 언어가 함수에 1a 더하고 어 어 너 소개를 할지 뭐 서버 개발에 대한 전반적인 내용에 대해서 설명을 할지 다양한 주제가 있는데요 이 섹션의 목적은 어 함수형 언어의 대한 약간 개념 코드를 낮추는 그런 역할을 했으면 좋겠고 새로운 언어 패러다임에 대한 소개 였으면 좋겠구요 그 다음에 게임 개발 언어로써 엘릭서 가 어떤 역할을 하는지 장점이 있는지 그런 소개에 장이 됐으면 좋겠고요 그 다음에 새로운 어용 감이나 구조 설계를 하실 때 사고 전환을 할 수 있는 계기가 되었으면 좋겠습니다 그래서 너무 다양한 주제를 달다 보니까 이야기 힘들거나 빠르게 진행할 수 있으니 어 먼저 양해를 부탁드립니다 진행 순서는 항상 웰스 에 대한 소개를 할 거고요 그 다음에 특징 남서 구조 설계 예 어 도입 결과 그 다음 마무리로 진행하겠습니다 일단 달빛조각사 라는 프로젝트 는 정통 예능 rpg 경험을 모바일에서 구해야 하는게 목표 구요 일단 서버 설계 관점에서 보자면 은 쿼터뷰 시점 이고 조언을 이동해 가는 게임 플레이 형태입니다 초기 개발 환경은 언리얼 엔진 이었구요 그 다음에 서버는 시샵 으로 만들어져 있었습니다 근데 개발 중간에 어 유니티 엔진으로 같았구요 서버 는 lx 언어로 다시 개발을 하게 됐어요 그 이유가 어 다양하고 복합적인 어떤 상황이 있고 이유가 있겠지만 이 세션을 통해서 그 짐 작을수록 진행하도록 하겠습니다 어 일단 [음악] 엘릭서 로 설명할 때 함수형 언어를 빼놓을 수 없는데요 설명을 할 수가 없 하지 않을 수가 없습니다 그래서 제가 생각하기에 함정 언어의 여러 가지 특징 있어요 머레이 지니스 나라든지 1급 개체 라든지 고참 수 뭐 이런 람타 계열의 어나니머스 당신이 라든지 이런 다양한 종류의 어떤 특징들이 있는데 그중에서 제가 생각하기에 이 세가지 델타 구조 라든지 순수한 함수 2 재개 라든지 이런 부분이 정도 특징적 이지 않을까 생각합니다 그래서 데이터 구조는 기본적으로 리스트나 큐플 맵 이라는 형태로 이루어져 있구요 오른쪽에 보시면 그 캐릭터라는 데이터를 리스팅 난 q 프리남 앱의 잘 구절 이용해서 어 그 구조화 하고 있구요 그래서 그 실제 데이터를 접근할 때는 저희가 객체의 멤버를 접근 하듯이 그렇게 어 데이터의 값을 가져오거나 어 넣거나 할 수 있습니다 어 함수에 오늘 에서 데이터는 이를 턱을 하다는 것이고요 어이 이 유튜브 리 라는 것은 어 메모리 공간에 어떤 저장된 내용이 변경되지 않는다 라는 것을 의미합니다 그래서 그 메모리 공간에 어이 때 데이터를 변경할 2기 물 언젠가는 생기는데요 그 변경을 할 때 어떤 순수한 함수 함수 에 입력과 출력의 의해서 변경을 제어하게 됩니다 기존의 객체지향 언어에서는 이런 상 데이터의 상태를 제어 하기 위해서 뭔가 추상화 라든지 어 캡슐 하든지 접근 제어 함수를 통해서 언어 노력을 많이 하는데요 1 수영은 하는 단순 관성의 함수를 통해서 마 이렇게 변경을 하게 되는 됩니다 그래서 이 특징중의 하나가 함수가 순수 한다는 것인데요 어 이 순수 하다는 것이 함 입력 값에 의해서 출력 값이 동일하다는 것입니다 물론 어 이 순수 하다는 말에 뭐 동일한 용어들이 많이 있어요 그런데 악 물론 언어 차원에서 이 순수함을 지원 한다는 것이구요 어 이 순수함을 깨는 다양한 어떤 포인트가 있습니다 뭐 예를 들어 파일이 라든지 데이터베이스 라든지 이런 어 싸이 d 팩트로 불러오는 어떤 것들이 있는데 그런 것들을 최대한 회피할 수 있는 그런 언어의 기능 이라는 것이죠 그리고 엇 대부분의 어 그 함수들은 제 길을 통해서 이루어집니다 왜냐하면 은 밑에 이탈을 변경하기 위해 함수의 입력을 주구 어떤 변경된 조작하기 위한 테잎 변경된 값을 리턴 을 받아서 그것을 재 사용을 하기 때문에 모든 함수들이 잭이 근본적으로 잭이 함수로 이루어져 있구요 그래서 오히려 그 지저분해질 수도 있기는 하지만 엘릭서 에서는 그런 부분을 어 어떤 유틸리티 같은 함수를 지원해서 취한 도 가능합니다 lx 의 특징에 대해서 설명을 하겠습니다 이익선 은 어 형 대 적이고 생산적인 언어라고 생각합니다 최근에 많은 어 보랏 은진호 2집 노드 라든지 자바스크립트 같은 언어들은 이런 빌드 나 배포 나 패키지 매니져 요 그 다음에 유니테스트 문서를 통합적으로 관리하는 어떤 시스템이 존재합니다 마찬가지로 l 있어도 그러한 것들을 제공하고 있구요 믹스 라는 어떤 툴을 제공을 하는데요 이 이걸 통해서 프로젝트를 생성하고 관리하고 배포를 하면서 라이브러리 어느정도 관리하고 어 통합적으로 관리 하게 됩니다 마찬가지로 다양한 하이 프로젝트를 존재할 수 있는데요 이런 하이 프로젝트들을 통합해서 관리하는 어떤 솔루션과 같은 엄브렐러 프로젝트 게 기능도 제공하고 있습니다 어 가장 인크루트가 없다는 것인데 야 이 폴더가 없으면 코드가 어 참조하는 어떤 그 프로젝트나 하이 프로젝트나 어정 속성 있는 어떤 라이브러리들을 의 전송 설정 추가 만으로 직접적으로 접근을 가능하게 할 수 있습니다 파이프 형사 r 연산자 기능을 지원하는데요 어 중첩된 함수 코 출은 어 가독성을 떨어뜨리기 쉽습니다 그런데 8g 선 자를 통해서 좀더 순차적으로 읽어 내려갈 수 있기 때문에 코드 량 어 가독성을 높여 줄 줍니다 어 패턴 매칭을 를 빼놓을 수 없는데요 패턴 매칭 은 기본적으로 위에서 아래로 어 읽어가는 순서대로 배 천 패턴 매칭 어 구문을 실행하게 됩니다 그래서 어 뭐 에러처리 라든지 함수가 리턴하는 어떤 에러 처리를 좀더 어 한 곳에 모아서 가독성 있게 처리할 수 있게 됩니다 엘릭서 가 지원하는 것 중에 하나가 코드 포맷팅 을 자동적으로 해 준다는 것인데요 어 컨벤션을 강제하기 때문에 어 그 프로그래머 들 간의 어 이런 어떤 전통적인 스타일에 대한 논쟁이 없어지게 됩니다 그래서 어 시간을 절약할 수가 있구요 아 컴파일 속도가 무지 빠릅니다 그래서 현재 달빛조각사 는 약간 약 11만 주 렉 코드가 있는데요 그 주 그런 크림 콧 크림 빌드를 해서 하게 되면 20초 내외로 끝나게 됩니다 lx 의 두 번째 특징은 어 수십 수십 년 된 얼렁 의 생태계를 그대로 이용한다 는 것인데요 5 그 생태계를 이용하다보니 안정적으로 어떤 서버 라든지 어플리케이션을 구축할 수가 있습니다 원래 을 잠깐 소개를 하면 에릭슨 이라는 통신에서 가 만든 언어 이구요 아 한 30년 정도된 안정적으로 현장에서 검증된 언어입니다 그래서 어 30년 동안 뭐 1초에 당 타임 을 기록했다 라고 어 이 길을 하는데 어 물론 코드를 잘 줘야지 그렇게 된다고 생각을 하고 하지만 기본적으로 언어 차원에서 그렇게 가능하도록 하는 어떤 기법들이 존재를 합니다 기본적으로 어 가볍고 작은 형태로 프로세스로 라는 단위가 존재를 하는데요 어이 이 프로세스는 수천 수십만 개의 프로세스를 생성 하도록 권장하고 있습니다 아 이렇게 이 프로세스들은 기본적으로 액터 기반으로 만들어져 있는데요 어 벡터 라는 것이 메시지를 주고받는 q 로 가지 가지고 있고 어 그 q 를 통해서 상태의 q 를 통해서 메시지를 주고 받을 수 있고 상체 상태를 가진다는 것입니다 어 이 아래와 같은 예제를 통 보시면 어코드 몇 줄만 으로 어 간단히 보통 그 클라이언트와 통신할 수 있는 속히 cp 서버를 제작할 수 있습니다 수많은 프로세스를 만들게 하다 보니 어 기본적으로 하나의 몇 개의 프로세스가 죽더라도 크래쉬 로 죽더라 종료 되더라도 전체 서비스의 영향을 미치지 않는 마이크로 서비스 형태의 어떤 서비스를 쉽게 제작할 수 있습니다 서버 프로그래머 가장 무서워 하는 단어 중에 하나가 어 서버 다운 인데요 서버 서비스 오픈 하기 직전에 어떤 서버 프로그램은 항상 가슴이 답답하고 그런 조마조마한 상태거든요 근데 어 엘릭서 는 이거를 어 항상 허용합니다 무슨 말이냐면 은 버그는 언제나 존재할 수가 있어요 그래서 그 버그는 버그 에 의해서 프로세스가 죽게 놔두는 거예요 그래서 그 죽은 프로세스를 다시 살리는 추가 이제 라는 기능을 제공합니다 그러면 그 수퍼 아 이제는 어떤 정책에 의해서 그 잘 죽은 자식을 살이 찌 모든 자식을 살리기 찌 그런 어떤 설정을 하게 되구요 어 오른쪽과 같이 프로세스의 그림 자체가 트리 형태를 이루어 지게 됩니다 그래서 또 하나로 그 빈도수가 극히 드문 복잡한 예 처리가 있어 있을 경우가 있습니다 그런 경우에는 오히려 복잡한 예배 처리를 하기 보다는 o 이 프로세스를 죽이거나 종료 시켜서 제 시작하는 정책을 권하고 있습니다 예를 들어 길드원이 어 게임은 게임의 진입을 했는데 길드장 2부 순간에 길드를 파괴 했어요 그러면 은 길드원이 길드 프로세스를 접근하는데 파괴된 프로세스의 이기 때문에 죽게 되거든요 그런 경우에는 엘릭서 에서는 어 죽게 내버려 두고 다시 깨끗하게 재진입 한다거나 그런 식으로 프로세스를 재 시작 하도록 유도하면 좀 더 복잡한 예외 처리를 안 하게 되고 유저 입장에서는 어 그것을 느낄 순 극히 짧은 시간에 어떤 제 시작이 되게 되기 때문에 그런 것들은 느끼기 힘듭니다 그래서 이런 어떤 메커니즘을 가지고 있기 때문에 어 행 재산의 테스트를 자주 하는데 그런 안심하고 서버 서비스를 한 상태입니다 현재 엘릭서 는 어 아주 빠른 그 메모리 케시 역할을 하는 익히 s 라는 시스템을 제공합니다 이거는 어 큐플 데이터를 어 저장을 하는데요 상수 시간에 어 기록하고 가져오고 어 실제 2 테이블을 생성하는 프로세스가 동일한 라이프 사이클을 가지기 때문에 슈퍼바이저 랑 프로세스 랑 이런 잘 구성함에 따라서 이런 데이터들을 이태 골대를 클리어 하거나 어 사용할 수 있게 됩니다 기본적으로 언어 차원에서 유니테스트 를 지원하는데요 함수 위쪽에 어예 제 형태로 함수의 호출을 하게 되면 어 어떤 커맨드 명령을 통해서 2 위의 예제 샘플 에 결과를 출력하게 되거든요 그래서 실제로 코드와 그 유니테스트 의 어떤 코드를 같이 인접하게 관리할 수 있다는 것이죠 그리고 마찬가지로 주석과 의 샘플을 같이 유니테스트 코드 량 작 같이 작성을 하게 되면 동일하게 괌 & 라인으로 어 어 웹페이지 문서를 출입하게 해줍니다 개인적으로 엘릭서 라는 언어의 커 들이 3가지 정도 좀 존재를 하는데 근본적으로 함수에 원하기 때문에 가져오는 어떤 심리적 진입장벽이 있고요 그 다음에 어 x 에서 지원하는 매크로가 있어요 그 함수 10 플러스 플러스 의 어떤 매크로 랑 비슷하지만 약간 다른 그런 형태의 매크로 의 어떤 학습 난이도가 좀 조금 있구요 그 다음에 오픈 소스를 얼른 기반 있다보니까 오픈 소스로 보지 않을 수가 없는데 이 오픈 소스들이 열량으로 많이 이루어져 있거든요 그래서 원래 코드를 어 보낸 퍼들 고런 부분이 있을 수 있습니다 이제 엘릭서 를 이용해서 서버 구조 우리를 어떻게 설계할 지에 대해서 설명하겠습니다 일단 프로세스를 라는 기중 이 상당히 중요한데요 프로세스가 1 인터랙션이 많지 않는 모직 그 다음에 명확하게 불이익을 가능한 콘텐츠 드 비동기로 동작하는 오직 뜰을 약간 프로세스로 나누며 좀 좋지 않을까 싶습니다 그래서 실제 프로세스가 멧세지 통신 기염 보다 로직 처리 비용이 정도 비싼 그런 경우 프로세스를 않은 계시면 되겠습니다 일단 가장 쉽게 접근할 수 있는 방법이 유저 프로세스 를 나누는 것인데요 일반적으로 게임서버 일 경우에 수백 수천의 클라이언트가 붙기 때문에 그 유 저마다 일대일로 프로세스를 바인딩 해 놓으면 쉽게 어떤 풋 많은 수의 프로세스를 만들 수 있게 되구요 이 대부분의 클라이언트 요청 패킷 들은 독립적으로 인터랙션이 없는 패킷들을 이기 때문에 어 그 요구조건 f 하구요 그 다음에 일부 클라이언트가 일부 클라이언트 유저 플러스가 크래쉬 나더라도 전체 프로세스의 전체 써비스 서버 서비스의 00 주지는 않습니다 그리고 어 문 소 프로세스를 나눌 수가 있는데요 몬스터 ar 장당 하고 있구요 어 플레이어와 아 대부분 동일한 오직 을 로 구현이 되어있습니다 근데 어 인접한 어떤 유저나 몬스터 끼리 서로 인터랙션이 많기 때문에 어 지역별로 몬스터 그룹을 관리하는 게 포인트인 것 같습니다 이 다양한 프로세스들을 어 접근해서 메시지를 주고받기 위해서는 어 컨텐츠별로 어 프로세스 id 를 찾는 어떤 메커니즘이 필요합니다 그래서 저희는 디렉토리 라는 어떤 컨텐츠 예로 디렉터리 라는 서비스를 유지 를 해서 어떤 메세지를 주고 받고 있습니다 이 프로젝트의 초기 프로세스는 모델인데요 처음에는 유조 프로세스에서 어떤 공격해 귀신아 이동 패킷이 오게 된 이동 패키지 오게 되면 한 공간에서 인터렉션 하는 어떤 그 객체들을 1 프로세스의 모았어요 그래서 지역 프로세스 라는 그런 프로세스의 어떤 메세지 전송을 통해서 인터랙션을 하고 오직 영상 처리를 하고 그런 식으로 처리를 했었거든요 그러면은 발생하는 문제가 아 어 2채널 플러스 이 지역 프로세스의 2채널 프로세스 라고 불리는 이 여기에 멧세지 통신비용이 올라갑니다 그리고 이 영상도 같이 처리 하기 때문에 연상 비용도 같이 올라가게 되죠 그래서 채널 프로세스의 병목이 생기게 되구요 그러면 전체적으로 전체적인 서비스가 느려지는 그런 상황에 사랑이 왔습니다 그래서 저희는 애터미 모델을 극대 하는 방법으로 접근을 했구요 아 인터랙션이 있는 프로세스가 안 직접적인 맥스 씨 통신을 로 어 아 접근했습니다 유저 프로세스가 넌 어떤 공격을 할 때 어떤 기본적인 원칙 자체는 대상 프로세스로 메세지 전달은 기억 토리 서비스로 이루어 지고요 일단 자신의 데이터를 바꿀 때는 자신의 프로세스에서 하는걸로 왜냐하면 어 그래야 데이터의 무결성을 유지할 수가 있기 때문입니다 예를 들어 어 공격 공격자가 p 격자로 공격을 할 경우 공격자가 경적 메시지를 p 격자 프로세스로 보내게 되는데요 p 격자 프로세서의 는 공격 연산 처리 후에 어떤 p 격자의 어떤 뭐 데미 철이 덜 ghp 라든지 뭐 이런 걸까 구요 어 그렇게 하면 됩니다 그런데 실제 어 다시 공격자 카운터 프라 든지 뭐 그게 어떤 상태를 변경하기 위해서 공격자의 상태를 변경할 경우가 있거든요 그럴 경우에는 잎이 격차 프로세스에서 다시 공격 응답에 대한 메시지를 보내게 됩니다 그러면 공격 응답을 공격자 프로세스가 받아서 어 공급자의 프로세스의 상태를 변경하게 됩니다 범위 공격과 같은 목수 곡 대상으로 공격하는 어떤 시퀀스 드 시 코스도 동일 한데요 p 격자 프로세스를 이스트로 단순히 공격 패킷을 공격 메세지를 보내면 일단 됩니다 됐는데 예를 들어 그 이 공격에 대해 이 공격에 대해서 p 격자 프로세스가 카카오톡 어플을 다 각자 카운트 버프를 생성을 해요 그리고 다시 공격자 로 응답을 주게 되면 공격자는 중첩된 컴터 버프가 걸리게 되거든요 그래서 이것들을 같은 공격 이라는 걸 구별하기 위해서 공격자 번호를 공격 버너를 발 급해서 이게 같은 공격 인지 다른 공격 인지 구배를 해서 어떤 데이터가 의 어떤 중복이 라든지 이런 것들을 해결하게 됩니다 유저의 이동도 마찬가지인데요 유저 프로세스 이동백 키스를 받은 유저 프로세스에서 대부분의 자신의 상태를 변경 하구요 그 다음에 어 나의 이동을 주변에 어떤 지역 관리 프로세스로 이동해서 이동을 알립니다 그리고 주변에 라 이정 네가 이동했다는 정보를 출현해 알립니다 주변에 누가 있는지 어 지역 관리 프로세스 라는 것이 존재 해야 되는데요 이 객 떤 어 격자 무늬의 격자 형태로 어떤 객체 대로 관리하고 있고요 어 그중에서도 어 지옥 빨리 프로세스에서 브로드캐스팅 을 직접 담당을 하게 되면 예전에 이전에 채널 프로세스에서 브랫 영상작업 이라든지 브로드캐스트 로직이 있어서 부하가 몰리는 그런 형상이 재현이 되게 됩니다 그래서 단순히 지역 개최 들으 를 관리만 하고요 실제 유저 프로세스에서 주변에 어떤 프루프 브로드캐스팅 목록을 유지하게 됩니다 그러면 실제 블루 캐스팅 지역인 이동 빈도 보다 훨씬 많기 때문에 유저 프로세스의 어 유저 프로세스의 브로드캐스팅 을 좀 더 효율적으로 할 수 있게 됩니다 이렇게 구조를 개선함으로써 어 채널 프로세스의 집중되는 병목을 분산할 수 있었구요 어 실제의 채널 프로세스가 죽게되면 거기에 속해 있는 유저 프로세스가 쭉 추가 썼거든요 그런 지금 팩터 기반으로 어떤 프로세스 인터랙션 한 프로세스가 4 어떤 메시지의 통신으로 변경 됐기 때문에 어 그 해당 프로세스의 만 어 죽게 됩니다 그리고 채널 프로세스의 많은 로 집들이 있어 기 있었는데 그런 부분이 어떤 공통적인 로직으로 분리가 되었구요 그래서 전체적으로 성능과 안정성과 생산성을 동시에 가져오는 효과를 봤습니다 이외에도 엘릭서 는 어 많은 기능이 있어요 그 예를 들어 이 otp 원래 otp 라는 어떤 서버 구축에 필요한 일련의 프레임 어 모음 들이 있어요 이런 뭐 그 분산 dbms 라든지 서버 구축에 필요한 어떤 서버를 간단하게 구축할 수 있게 추상 한 채널을 서버 라든지 어 어 2 케이스 아까도 말씀드렸듯이 ets 라든지 프로파일링 시스템 디버거 뭐 암호화 식 라이브러리 뭐 각 인터넷 프로토콜 들을 각종 지원을 하고 있습니다 그런 것들을 활용해서 어 아 이미 쉽게 서버를 구축할 수 있었구요 이 엘릭서 는 기본적으로 엘릭서 라는 언어 자체가 매크로로 만들어져 있습니다 그래서 새로운 내가 원하는 형태의 새로운 문법을 매크로를 이용해서 만들 수가 있습니다 그래서 실행 시간에 컴파일 타임에 어 코드를 제너 라이트도 할 수 있구요 실행 시간에 코드를 마찬가지로 제너레이터 할 수도 있습니다 그리고 달 저희 팀에서는 현재 어 치트 정 의를 매크로를 이용해서 정의를 위해서 좀 더 빠르게 어 치트를 추가할 수 있도록 하고 있습니다 마찬가지로 인턴의 특히 브 모드라고 어떤 어플리케이션을 실행할 때 첼 모드로 실행할 수 있습니다 그 쉘 모드로 실행해서 어떤 각종 속 어플리케이션 의 서버 에 상태 라든지 어 그런 것들을 확인할 수 있구요 어 직접 함수를 호출하거나 함수에 값을 변경하거나 그런 것도 가능합니다 그래서 현재 프로세스의 스 다양한 프로세스의 어떤 8월 키 상태를 확인할 수도 있고 메모리 상태 라든지 cpu 상태 그 다음에 어떤 부화 상태 프로파일링 도 가능합니다 마찬가지로 이 인터랙티브 모드를 통해서 특정 코드를 변경하고 실시간으로 어 200년 코드를 입 요 딩 해서 어 프렌드 가 붙은 상태에서 디버깅 도 가능하구요 어 실시간 코드 패치도 실제 언어 차원에서 지원을 하고 있습니다 그래서 어 보기 좀 힘든데요 왼쪽에 어떤 코드를 오른쪽 형태로 바꾸고 실제 인터넷 기부 모드를 통해서 어 하 패치를 하는 상황입니다 이렇게 쉽게 할 수 있다는 것이죠 그리고 아 이런 프로세스 단위로 어떤 구성이 되어있다고 되어 있다보니 프로세스를 어 프로세스의 안에 있는 로 집들을 잘 어떤 구성하게 되면 이 프로세스를 로컬에 띄운다 거나 리모트 머신에 어떤 그 얼른 vm 위에 띄운 다거나 이렇게 간단하게 설정만으로 어 어 로그인 그 승산 서버를 5 만들 구축할 수가 있습니다 그래서 저희도 지금 현재 로그인 서버 같은 경우에는 개발 시에는 로컬 머신에서 로컬 프로세스로 뛰고 요 리모트 에서는 설정을 통해서 이모 통신에서 로그인 서버를 띄우고 있습니다 이런 프로세스가 멧세지 동신 자체가 어 어 프로토콜을 정리 한다거나 그런 것들이 필요없기 때문에 아주 쉽게 숭산 서버 구성이 가능합니다 펠릭스를 개입한 결과에 대해서 입니다 어 아직 엘릭서 는 어 라인 언어 이구요 스택 오버플로 2019년 따끈따끈한 자료인데요 현재 인기있는 어느 23 이에 랭킹이 있어 랭크 돼 있거든요 그래서 아직 신생 언어 이다 보니까 알린 크게 따른 것만으로 만족해야 될 것 같구요 그래서 그렇지만 헐랭이 나 엘릭서 컨퍼런스 가 매년 개최되고 있고 업데이트도 메이저 업데이트가 반 년 주기로 이루어지고 있습니다 그래서 아주 빠르게 뭔가 새로운 기능이 추가되고 있고 당연히 안정적으로 사용할 수가 있습니다 일단 가장 걱정하는 부분이 안 부분중에 하나가 어 함수형 언어 이고 이 그렇다 보니 어 느슨한 타입 검사를 하게 되거든요 그래서 실제로는 타임에 어 에러가 발생이 된거 c 플러스 플러스 같은 경우에는 컴파일 타임에 발생 발견이 되지만 런타임에 발견되는 예외 들이 꽤 있습니다 그런데 어 이 앨리스가 갖춘 어떤 수퍼바이저 프로세스를 통해서 그런 경우는 어 시간을 벌어 주고요 어 일단 프로그래머가 한번 코드를 짜서 테스트를 돌려보면 그런 경우는 거의 발생하지 않거든요 사이드 이펙트가 없기 때문에 그래서 한번 테스트는 해보면 이런 경우는 밭 자주 발생하지 않습니다 그리고 센트리 라는 도구를 통해서 이런 에러를 리포트 박아서 쉽게 수정할 수가 있거든요 그래서 저희가 뭐 산에 테스트 나 이런거 실제 살 테스 전에 대부분의 어떤 런타임 에러 들은 수정을 할수 있게 됩니다 대부분 복어가 되기 때문이죠 그래서 우리가 노력해야 될 것들은 실제 유니테스트 로 어 이런 코드를 한 번이라도 실행할 수 있게 만들어 주는 것 그 다음에 그래서 어 5 일단 콘텐츠 개발 담당 개발자들이 웨이 테스트를 작성하고 있어요 그래서 ets 저희 같은 경우에는 의미인 테스트가 실패하면 배포가 안되도록 그렇게 하고 있습니다 2l x 라는 엘릭서 랑 원래는 실제 많은 곳에서 쓰고 있는데요 어디 스 코드가 가정 유행 재미교포 께서 다들 아시겠지만 디스 코드가 엘릭서 로 만들어져 있습니다 그래서 2 채팅 예전에 원래 이자 버드 그라는 채팅 그 프레임 업 자체가 유행한 적이 있는데 그것 때문에 아마 인스턴트 메시징 이나 소셜네트워크 쪽에서 많이 사용하는 것 같습니다 일단 저희 플렉 트에서 어 2 아 달빛조각사 코드 랑 제갈 도전 의 어플의 젝트 를 담당했던 5명 코드 랑 비교를 해봤어요 그다음 배타적인 기능을 제외하고 비교를 해봤더니 실제 1 6분의 1정도 아인스 를 가 되구요 그래서 실제 빌드 도 빠르고 라이센스도 줄 9 어 이런 것들이 생산성을 가져왔다고 볼 수 있지 않을까 싶습니다 그리고 저희가 저희 팀에서 얘네 테스트를 적극적으로 활용하기 때문에 1 200 녀 가지를 만들고 있어요 지금 1 207 10가지 정도 되는데 이런 것들을 통해서 빠른 이터 레이 션 클라이언트 없이 빠른 터 레이 션으로 서버를 리팩토링 한다거나 구조를 개선한 한다거나 이런 것들을 할 수 있게 됩니다 그리고 어 일단 메모리 문제에서 해방 할 수가 있어요 메모리를 가비지 컬렉션 이라는 vm 에서 관리를 하고 있기 때문에 실제 아 아 이건 헬 대여를 하지 못하지만 실제 메모리 침범에 어야 날 수 없는 어 에러는 없거든요 그래서 이게 어 저희 행복을 가져왔습니다 일단 예 이제 마무리를 하겠습니다 엘릭서 는 기본적으로 원래의 생태 내 얼 얼린 가진 어떤 장점을 취하면서 그 다음에 엘릭서 의 현대적인 기능과 생산성을 가져온 그런 언어 라고 생각을 합니다 그래서 어 일단 서버 설계 시에 고려해야 할 사항은 일단 많은 수의 프로세스를 만들어야 되기 때문에 어떻게 프로세스를 난 울지 그런 프로세스가 4 어떤 논리적으로 고립 시킬 수 있는 컨텐츠들이 어떤 것인지 그 다음에 프로세스가 어떤 달 많은 수의 프로세스를 나 잘게 나눠야 되기 때문에 가볍게 유지하는게 중요해요 그래서 어떻게 애비 로드 를 가지지 않고 프로세스를 9분 할지 매 프로세스가 멧세지 비용 통신비용이 이 많지 않게 메시지를 컴팩트하게 의지하는 게 관건이라고 생각합니다 이런 개발자 들에 대해서 를 추천합니다 높음 가영 썽 서버 가 죽지 않는 춥긴 하며 죽긴 하는데 다시 살아나요 그래서 높은 가능성을 가진 서버를 만들고 싶은 분 그 다음에 유니테스트 를 통해서 어 빠르게 이터 레이 션 어 빠른 l 레이 션 바른 개발의 몽 a 신분 어 이 팩토링 이 무서워서 개발 이 팩토리 해보지 못한 경험이 다들 있으실 거에요 그런 것들이 l 있어 는 되게 동 도움을 주지 않을까 싶습니다 이런 서버 개발에 추천합니다 어 레스트 api 를 사용해서 세트 레이스 게임 서버 어 엘릭서 르 엘릭서 언어를 이용한 피닉스 라고 웹 프레임워크 존재 하거든요 보 성능 때 프레임워크 존재를 해요 이루비 불어 훨씬 빠르다는 어 그런 것들을 해외에서 많이 사용하고 있습니다 그런 것들이 추천하구요 그 다음에 스케일 아웃 쉽게 어떤 분산 서버 구축이 가능하기 때문에 스킬이라고 가능한 밴드 서고 추천합니다 그리고 mmo 형태 하나의 프로세스가 헤비 하게 가져가지 않는 형태 깐 고런 형태의 게임 서보 추천하구요 mmorpg 서버는 저희 달빛조각사의 먼저 해보겠습니다 els 써라 는 것은 어 일단 허브 셔터 2005년도에 프리 런치 공짜 점심 없다 라고 얘기를 하셨거든요 그때부터 다음 하였을 거에요 싱글 스레 대해서 olt 스레드로 뭔가 전환을 하면서 어떻게 공유 자원을 락 없이 잘 스레드를 아 누구지 그런 고민을 많이 써 를 쓸 텐데요 엘릭서 는 그 잘게 기본 근본적으로 프로세스를 잘게 나누기 때문에 그 하드웨어 하드웨어 리소스를 최대한 활용을 합니다 그래서 어 오히려 공짜 저는 힘이 되지 않을까 저는 기대해 봅니다 x 가 그 대상이 되지 않을까요 감사합니다 [박수]